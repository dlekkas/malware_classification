import pickle
import yaml
import logging



OBJECT_DIR = 'obj/'
LOGGING_FILE = 'log/features.log'
'''
# Configure a custom logger for debugging purposes
logging.basicConfig(
        filename=LOGGING_FILE,
        format='%(asctime)s %(levelname)-8s %(message)s',
        level=logging.DEBUG,
        datefmt='%d-%m-%Y %H:%M:%S')
'''

def load_config(conf_file):
    with open("config.yml", 'r') as ymlfile:
        conf = yaml.load(ymlfile)
    train_labels = conf['train_labels']
    dataset_dir = conf['dataset_dir']
    return dataset_dir, train_labels

# save an object as a pickle file
def save_obj(obj, name):
    with open(OBJECT_DIR + name + '.pkl', 'wb') as f:
        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)

# load an object saved as a pickle file
def load_obj(name):
    with open(OBJECT_DIR + name + '.pkl', 'rb') as f:
        return pickle.load(f)

# maintain a progress bar to show completion progress during feature extraction
def progress_bar(curr, total, full_progbar):
    frac = curr/total
    filled_progbar = round(frac*full_progbar)
    print('\r', '#'*filled_progbar + '-'*(full_progbar-filled_progbar), '[{:>7.2%}]'.format(frac), end='')
    if curr == total:
        print('\n')

def log_exception(e, progname, filename):
    asm_file = filename.split('/')[-1]
    logging.error(
            '[' + progname + '] File "'+ asm_file + '" raised ' + str(e.__class__) +
            '(' + str(e.__doc__) + ')')
